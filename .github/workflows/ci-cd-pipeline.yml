name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      ECR_REPOSITORY_BACKEND: mini-pastebin-repo:backend
      ECR_REPOSITORY_FRONTEND: mini-pastebin-repo:frontend
      AWS_REGION: ${{ secrets.AWS_REGION }}
      CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx (to build multi-platform images)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      #Step 3: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3.a: Log in to AWS ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      # Step 4a: Install Terraform
      - name: Install Terraform
        run: |
            sudo apt-get update
            sudo apt-get install -y terraform
      
      # Step 4b: Build/Verify infrastructure
      -name: Build/Verify infrastructure
        run: |
          terraform -chdir=infrastructure apply -auto-approve

      # Step 4: Build, Tag, and Push the Backend Docker image
      - name: Build and push backend Docker image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND -f ./backend/Dockerfile ./backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND

      # Step 5: Build, Tag, and Push the Frontend Docker image
      - name: Build and push frontend Docker image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND -f ./frontend/Dockerfile ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND

      # Step 7: Install AWS CLI
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      # Step 6: Set up kubectl
      - name: Set up kubectl
        run: |
          mkdir -p ~/.kube
          echo ${{ secrets.KUBECONFIG_DATA }} | base64 --decode > ~/.kube/config
          kubectl config use-context arn:aws:eks:${{ secrets.AWS_REGION }}:345594564536:cluster/${{ secrets.EKS_CLUSTER_NAME }}
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
      
      #Step 8: Test kubectl connection
      - name: Test kubectl connection
        run: |
          kubectl get nodes

      # Step 9: Update Backend Deployment in EKS
      - name: Deploy backend to EKS
        run: |
          kubectl set image deployment/backend-deployment backend=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND

      # Step 10: Update Frontend Deployment in EKS
      - name: Deploy frontend to EKS
        run: |
          kubectl set image deployment/frontend-deployment frontend=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND

